{"version":3,"sources":["components/video/video.js","components/intro/intro.js","components/player/player.js","components/hall/hall.js","components/session/session.js","App.js","serviceWorker.js","index.js"],"names":["Video","props","videoRef","React","createRef","history","useHistory","console","log","ref","className","autoPlay","src","videoSource","onEnded","window","location","href","includes","push","type","videoType","Intro","useState","setVideoSource","useEffect","to","Player","Hall","title","Session","agenda","startDate","Date","ednDate","date","setVideoSrc","videoTime","setVideoStart","checkLog","eventObj","loggedInDate","dt2","dt1","diff","getTime","toISOString","substr","Math","abs","round","diff_secs","alert","playing","onReady","player","getCurrentTime","current","seekTo","isPlaying","url","width","height","App","basename","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2882b912.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./video.css\";\n\nfunction Video(props) {\n  let videoRef = React.createRef();\n  let history = useHistory();\n\n  const redirectAfterEnd = () => {\n    if (window.location.href.includes(\"/player\")) history.push(\"/hall\");\n    else history.push(\"/player\");\n  };\n  console.log(props);\n  return (\n    <video\n      ref={videoRef}\n      className=\"myVideo\"\n      autoPlay\n      src={props.videoSource}\n      onEnded={() => redirectAfterEnd()}\n      type={props.videoType}\n    />\n  );\n}\n\nexport default Video;\n","import React, { useState, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Video from \"../video/video\";\r\nimport \"./intro.css\";\r\nconst Intro = () => {\r\n  const [videoSource, setVideoSource] = useState();\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    setVideoSource(\"/videos/login.mp4\");\r\n  });\r\n  return (\r\n    <>\r\n      <Video videoSource={videoSource} />\r\n      <div className=\"content\">\r\n        <h1>Heading</h1>\r\n        <p>\r\n          Lorem ipsum dolor sit amet, an his etiam torquatos. Tollit soleat\r\n          phaedrum te duo, eum cu recteque expetendis neglegentur. Cu mentitum\r\n          maiestatis persequeris pro, pri ponderum tractatos ei. Id qui nemore\r\n          latine molestiae, ad mutat oblique delicatissimi pro.\r\n        </p>\r\n\r\n        <NavLink to=\"/player\" className=\"myBtn\">\r\n          Skip video\r\n        </NavLink>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Video from \"../video/video\";\r\n\r\nconst Player = () => {\r\n  const [videoSource, setVideoSource] = useState();\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    setVideoSource(\"/videos/login.mp4\");\r\n  });\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <Video videoSource={videoSource} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\nimport \"./hall.css\";\n\nconst Hall = () => {\n  return (\n    <iframe\n      src=\"http://vodafonevirtualtour.com/\"\n      className=\"framesize\"\n      title=\"vois-3D\"\n    ></iframe>\n  );\n};\n\nexport default Hall;\n","import React, { useState, useEffect } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport \"./session.css\";\nfunction Session() {\n  const agenda = [\n    {\n      startDate: new Date(2020, 9, 13, 9),\n      ednDate: new Date(2020, 9, 13, 12),\n      src:\n        \"https://vodafonetube.qumucloud.com/asset/fktMIqLW0pl.m3u8?delivery=CDN_DOWNLOAD&format=hls_default\",\n    },\n    {\n      date: new Date(2020, 9, 14, 9),\n      ednDate: new Date(2020, 9, 14, 12),\n      src:\n        \"https://vodafonetube.qumucloud.com/asset/fktMIqLW0pl.m3u8?delivery=CDN_DOWNLOAD&format=hls_default\",\n    },\n    {\n      date: new Date(2020, 9, 15, 9),\n      ednDate: new Date(2020, 9, 15, 12),\n      src:\n        \"https://vodafonetube.qumucloud.com/asset/fktMIqLW0pl.m3u8?delivery=CDN_DOWNLOAD&format=hls_default\",\n    },\n  ];\n  let videoRef = React.createRef();\n  const [videoSource, setVideoSrc] = useState();\n  const [videoTime, setVideoStart] = useState(0);\n  useEffect(() => {\n    if (window.location.href.includes(\"/1\")) {\n      console.log(window.location.href);\n      checkLog(agenda[0]);\n    } else if (window.location.href.includes(\"/2\")) {\n      checkLog(agenda[1]);\n    } else if (window.location.href.includes(\"/3\")) {\n      checkLog(agenda[2]);\n    }\n    // Update the document title using the browser API\n  });\n  // Calculate the difference between the loggedInDate and the startDate of eventobj to forward the video till this point\n  function diff_secs(dt2, dt1) {\n    var diff = (dt2.getTime() - dt1.getTime()) / 1000;\n    console.log(new Date(diff * 1000).toISOString().substr(11, 8));\n    return Math.abs(Math.round(diff));\n  }\n  // Check if loggedInDate is greater, smaller than the endDate of the eventObject\n  const checkLog = (eventObj) => {\n    var loggedInDate = new Date();\n\n    if (loggedInDate < eventObj.ednDate) {\n      if (loggedInDate === eventObj.startDate) {\n        setVideoSrc(eventObj.src);\n      } else if (loggedInDate > eventObj.startDate) {\n        setVideoSrc(eventObj.src);\n        setVideoStart(diff_secs(loggedInDate, eventObj.startDate));\n      } else {\n        alert(\n          \"your session doesn't start yet, you can go to break room till the session start\"\n        );\n      }\n    } else {\n      alert(\"Your session has finished, we are eager to see you tomorrow \");\n    }\n  };\n\n  function startSession(player) {\n    if (player.getCurrentTime() === 0) {\n      videoRef.current.seekTo(videoTime, \"seconds\");\n      player.isPlaying = true;\n    }\n  }\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <ReactPlayer\n          ref={videoRef}\n          playing={true}\n          onReady={startSession}\n          url={videoSource}\n          autoPlay={true}\n          className=\"videoStyle\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n        <div className=\"bg-info chatBot\">chatBot</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Session;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\n\nimport Intro from \"./components/intro/intro\";\nimport Player from \"./components/player/player\";\nimport Hall from \"./components/hall/hall\";\nimport Session from \"./components/session/session\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route path=\"/hall\" component={Hall} />\n        <Route path=\"/player\" component={Player} />\n        <Route path=\"/session\" component={Session} />\n        <Route path=\"/\" component={Intro} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render((\n    <App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}